-- # Type parameters
--
-- - A value constructor can take some parameters and then produce a new value
-- - In a similar manner, **type constuctors** can take types as parameters and produce new types
--
-- In the following example,
--
-- - The `a` is a **type parameter**
-- - Since there is a type parameter involved, we call `Maybe` a **type constructor**
-- - Depending on what we want this data type to hold when its not `Nothing`,
--   this type constructor can end up produciong a type of `Maybe Int`, `Maybe
--   Car`, `Maybe String` etc.
-- - No value can have a type of just `Maybe`, because thats not a type -- Its a type constructor.

data Maybe a = Nothing | Just a

-- - Most of the time, we dont passs types as parameters to type constructors
--   explicitly. Thats because Haskell has type inference. So when we make a
--   value `Just a` for example. Haskell figures out that its a `Maybe Char`.
--
-- - If we want to explicitly pass a type as a type paramter, we must do it in
--   the type part of Haskell, which usually after the :: symbol.
--
-- Lets look at some examples
--
-- ghci> Just 3 :: Maybe Int
-- Just 3

-- ghci> Just "Haha"
-- Just "Haha"
--
-- ghci> Just 84
-- Just 84
--
-- ghci> :t Just "Haha"
-- Just "Haha" :: Maybe [Char]
--
-- ghci> :t Just 84
-- Just 84 :: (Num a) => Maybe a
--
-- ghci> :t Nothing
-- Nothing :: Maybe a
--
-- ghci> Just 10 :: Maybe Double
-- Just 10.0

-- ## Should we parameterize our car

-- See the first example

data Car = Car {company :: String, model :: String, year :: Int} deriving (Show)

-- Are we better of by paramerize like this?

data Car' a b c = Car' {company' :: a, model' :: b, year' :: c} deriving (Show)

-- But are we better off? Probably not. See examples below.

--  First without parameterization

tellCar :: Car -> String
tellCar (Car {company = c, model = m, year = y}) = "This " ++ c ++ " " ++ m ++ " was made in " ++ show y

-- We can test this with:

-- ghci> let stang = Car {company="Ford", model="Mustang", year=1967}
-- ghci> tellCar stang
-- "This Ford Mustang was made in 1967

-- Next with parameterization

tellCar' :: (Show a) => Car' String String a -> String
tellCar' (Car' {company' = c, model' = m, year' = y}) = "This " ++ c ++ " " ++ m ++ " was made in" ++ show y

-- ghci> tellCar (Car "Ford" "Mustang" 1967)
-- "This Ford Mustang was made in 1967"
--
-- ghci> tellCar (Car "Ford" "Mustang" "nineteen sixty seven")
-- "This Ford Mustang was made in \"nineteen sixty seven\""
--
-- ghci> :t Car "Ford" "Mustang" 1967
-- Car "Ford" "Mustang" 1967 :: (Num t) => Car [Char] [Char] t
--
-- ghci> :t Car "Ford" "Mustang" "nineteen sixty seven"
-- Car "Ford" "Mustang" "nineteen sixty seven" :: Car [Char] [Char] [Char]

-- Conculsion is that we are not better off.
